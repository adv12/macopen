#!/bin/bash

usage() {
  echo "Usage: macopen [-u <eduser>] [-h <host>] [-U <fsuser>] [-H <fshost>] [-e] [-t] [-f] [-W] [-R] [-n] [-g] [-h] [-b <bundle identifier>] [-a <application>] [filenames] [--args arguments]"
  echo "Help: Connects via SSH to the specified Mac, mounts this host's filesystem "
  echo "      via SSHFS, and opens the specified file(s) using the 'open' command."
  echo "Options (macopen-specific):"
  echo "      -u Connects to the Mac as the specified user"
  echo "      -h Connects to the specified host"
  echo "      -U Mounts this host's filesystem as the specified user"
  echo "      -H Overrides the host name for the connection to this host's filesystem"
  echo "Options (passed through to 'open' command):"
  echo "      -a Specifies the application to use for opening the file"
  echo "      -b Specifies the bundle identifier for the application to use when opening the file"
  echo "      -e Causes the file to be opened with /Applications/TextEdit"
  echo "      -t Causes the file to be opened with the default text editor, as determined via LaunchServices"
  #echo "      -f Reads input from standard input and opens the results in the default text editor.  End input by sending EOF character (type Control-D).  Also useful for piping output to open and having it open in the default text editor."
  echo "      -F Opens the application 'fresh,' that is, without restoring windows. Saved persistent state is lost, except for Untitled documents."
  echo "      -W Blocks until the used applications are closed (even if they were already running)."
  echo "      -R Reveals the file(s) in the Finder instead of opening them."
  echo "      -n Open a new instance of the application even if one is already running."
  echo "      -g Does not bring the application to the foreground."
  echo "      -j Launches the app hidden."
  echo "      -z [translated to '-h'] Searches header file locations for headers matching the given filenames, and opens them."
}

# Set the ED_USER variable that determines the user with which we'll log into
# the Mac.  Prefer the MACOPEN_USER environment variable; if that's empty,
# default to the logged-in user on this host.  This can be overridden by the
# -u command-line option.

if [ -z "$ED_USER" ]; then
  ED_USER="$MACOPEN_USER"
fi

if [ -z "$ED_USER" ]; then
  ED_USER="$USER"
fi

# Set the ED_HOST variable that determines what Mac we'll connect to via SSH.
# Prefer the MACOPEN_HOST environment variable; fall back on the SSH_CLIENT
# environment variable.  This can be overridden by the -h command-line option.  

if [ -z "$ED_HOST" ]; then
  ED_HOST="$MACOPEN_HOST"
fi

if [ -z "$ED_HOST" ]; then
  ED_HOST=$(echo "$SSH_CLIENT" | sed 's/ .*//')
fi

# Set the FS_HOST variable that tells the Mac what machine's filesystem to mount.
# In case the "hostname" can't be resolved due to DNS issues or something, this
# can be overridden by the -H command-line option.

FS_HOST=`hostname`

# Set the FS_USER variable that tells the Mac what username to use when mounting
# this host's filesystem.  This can be overridden by the -U command-line option.

FS_USER="$USER"

# parse the command-line options using bash's built-in getopts

OPEN_ARGS=()

APP_ARGS=()

while getopts ":u:h:U:H:a:b:etFWRngjz" opt; do
  case $opt in
    u)
      ED_USER="$OPTARG"
      ;;
    h)
      ED_HOST="$OPTARG"
      ;;
    U)
      FS_USER="$OPTARG"
      ;;
    H)
      FS_HOST="$OPTARG"
      ;;
    a|b)
      OPEN_ARGS+=( "-$opt" "$OPTARG" )
      ;;
    e|t|F|W|R|n|g|j)
      OPEN_ARGS+=( "-$opt" )
      ;;
    z)
      OPEN_ARGS+=( "-h" )
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

FS_PATHS=()

MOUNTS_DIR='$HOME/.macopen_mounts'
MOUNT_DIR="$MOUNTS_DIR/$FS_USER@$FS_HOST"

while [ -n "$1" ] && [ "$1" != "--args" ]
do
  FILENAME=$(basename "$1")
  DIRNAME=$(cd "$(dirname "$1")"; pwd)
  LOCAL_PATH=$(echo "$DIRNAME/$FILENAME" | sed 's|^/||')
  FS_PATHS+=( "$MOUNT_DIR/$LOCAL_PATH" )
  shift
done

if [ "$1" == "--args" ]; then
  APP_ARGS=( "--args" )
  shift
  while [ -n "$1" ]
  do
    APP_ARGS+=( "$1" )
    shift
  done
fi

if [ -z "$ED_HOST" ]; then
  echo "No host specified.  You have three options:"
  echo "  1) Export SSH_CLIENT in your .bashrc (bash unexports it under certain circumstances),"
  echo "  2) Set the MACOPEN_HOST environment variable, or"
  echo "  3) Specify the host on the command line via the -h option"
fi

#printf "%s\n" "${FS_PATHS[@]}"

MOUNT_AND_OPEN_SCRIPT=$(cat <<'EOF'

#printf "%s\n" "${FS_PATHS[@]}"

if [ ${#FS_PATHS[@]} -ne 0 ]; then

  if [ ! -d "$MOUNTS_DIR" ]; then
   mkdir "$MOUNTS_DIR"
  fi

  if [ ! -d "$MOUNT_DIR" ]; then
    mkdir "$MOUNT_DIR"
  fi

  if mount | grep "$MOUNT_DIR" > /dev/null; then
    #echo "filesystem $MOUNT_DIR already mounted"
    :
  else
    /usr/local/bin/sshfs -o follow_symlinks,volname=$FS_HOST $FS_USER@$FS_HOST:/ "$MOUNT_DIR"
  fi

fi

FS_PATHS_STRING=`printf "'%s' " "${FS_PATHS[@]}"`
FS_PATHS_STRING=$(echo "$FS_PATHS_STRING" | sed "s/''//")
OPEN_ARGS_STRING=`printf "'%s' " "${OPEN_ARGS[@]}"`
OPEN_ARGS_STRING=$(echo "$OPEN_ARGS_STRING" | sed "s/''//")
APP_ARGS_STRING=`printf "'%s' " "${APP_ARGS[@]}"`
APP_ARGS_STRING=$(echo "$APP_ARGS_STRING" | sed "s/''//")


#eval "echo open \"$OPEN_ARGS_STRING\" \"$FS_PATHS_STRING\" \"$APP_ARGS_STRING\""

eval "open $OPEN_ARGS_STRING $FS_PATHS_STRING $APP_ARGS_STRING"

EOF
);

FS_PATHS_STRING=`printf "\"%s\" " "${FS_PATHS[@]}"`
OPEN_ARGS_STRING=`printf "\"%s\" " "${OPEN_ARGS[@]}"`
APP_ARGS_STRING=`printf "\"%s\" " "${APP_ARGS[@]}"`

#echo "trying ssh ${ED_USER}@${ED_HOST}"

ssh "${ED_USER}@${ED_HOST}" 'bash -s' <<EOF

FS_HOST="$FS_HOST"
FS_USER="$FS_USER"
FS_PATHS=($FS_PATHS_STRING)
OPEN_ARGS=($OPEN_ARGS_STRING)
APP_ARGS=($APP_ARGS_STRING)
MOUNTS_DIR="$MOUNTS_DIR"
MOUNT_DIR="$MOUNT_DIR"

$MOUNT_AND_OPEN_SCRIPT

EOF
